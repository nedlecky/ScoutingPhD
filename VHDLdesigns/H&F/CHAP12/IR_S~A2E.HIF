HIF003
--
--  Copyright (C) 1991-1997 Altera Corporation
--  Any megafunction design, and related net list (encrypted or decrypted),
--  support information, device programming or simulation file, and any other
--  associated documentation or information provided by Altera or a partner
--  under Altera's Megafunction Partnership Program may be used only to
--  program PLD devices (but not masked PLD devices) from Altera.  Any other
--  use of such megafunction design, net list, support information, device
--  programming or simulation file, or any other related documentation or
--  information is prohibited for any other purpose, including, but not
--  limited to modification, reverse engineering, de-compiling, or use with
--  any other silicon devices, unless such use is explicitly licensed under
--  a separate agreement with Altera or a megafunction partner.  Title to
--  the intellectual property, including patents, copyrights, trademarks,
--  trade secrets, or maskworks, embodied in any such megafunction design,
--  net list, support information, device programming or simulation file, or
--  any other related documentation or information provided by Altera or a
--  megafunction partner, remains with Altera, the megafunction partner, or
--  their respective licensors.  No other licenses, including any licenses
--  needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	addcore.tdf
	{
		addcore [DEVICE_FAMILY,CARRY_CHAIN_LENGTH,CARRY_CHAIN,CONSTANT_CIN=0,width,USE_LPM_FOR_AHDL_OPERATORS] [addcore.inc]
		{
			14 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=5,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result4,result3,result2,result1,result0,cout,dataa4,dataa3,dataa2,dataa1,dataa0,datab4,datab3,datab2,datab1,datab0,cin];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc]
		{
			13 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=5,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			15 [DEPTH=0,WIDTH=5,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result4,result3,result2,result1,result0,data4,data3,data2,data1,data0];
			12 [DEPTH=0,WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0,data0];
		}
	}
	cmpchain.tdf
	{
		cmpchain [DEVICE_FAMILY,CASCADE_CHAIN_LENGTH,CARRY_CHAIN_LENGTH,CASCADE_CHAIN,CARRY_CHAIN,MODE,ONE_INPUT_CONSTANT,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc]
		{
			11 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=1,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa1,dataa0,datab1,datab0];
			9 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=1,ONE_INPUT_CONSTANT=0,lpm_width=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,agb,dataa0,datab0];
			8 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=1,ONE_INPUT_CONSTANT=0,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa1,dataa0,datab1,datab0];
			6 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=1,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa1,dataa0,datab1,datab0];
			5 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=1,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,agb,dataa1,dataa0,datab1,datab0];
			3 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=1,lpm_width=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	comptree.tdf
	{
		comptree [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=8,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,cmpchain.inc,lpm_constant.inc]
		{
			10 [MODE=1,BURRIED_CLOCKED=0,OUTPUTS_CLOCKED=1,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=1,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa1,dataa0,datab1,datab0];
			7 [MODE=1,BURRIED_CLOCKED=0,OUTPUTS_CLOCKED=1,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=1,lpm_width=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa2,dataa1,dataa0,datab2,datab1,datab0];
			4 [MODE=0,BURRIED_CLOCKED=0,OUTPUTS_CLOCKED=1,ONE_INPUT_CONSTANT=1,CHAIN_LENGTH=1,lpm_width=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab5,datab4,datab3,datab2,datab1,datab0];
			2 [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=1,CHAIN_LENGTH=8,lpm_width=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [agb,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [DEVICE_FAMILY=FLEX8000,CASCADE_CHAIN_LENGTH=8,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN=MANUAL,CARRY_CHAIN=MANUAL,ONE_INPUT_IS_CONSTANT=NO,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=UNSIGNED,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,altshift.inc]
		{
			16 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,ONE_INPUT_IS_CONSTANT=YES,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=SIGNED,lpm_width=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [AGB,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			1 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,ONE_INPUT_IS_CONSTANT=YES,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=SIGNED,lpm_width=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [ALB,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
		}
	}
	ir_sensor.vhd
	{
		ir_sensor [] [U5125632.DLS,U9092257.DLS,U9234712.DLS,U9587408.DLS,U2043679.DLS,U7449008.DLS,U1147235.DLS]
		{
			0 [] [];
		}
	}
}
TREE
{
	ir_sensor::(0,0):(0): ir_sensor.vhd
	{
		lpm_compare:1:(25,17):(67): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_add_sub:13:(26,17):(87): lpm_add_sub.tdf
		{
			addcore:14:(205,4):(48,adder): addcore.tdf;
			altshift:15:(215,2):(70,result_ext_latency_ffs): altshift.tdf;
			altshift:12:(217,2):(85,carry_ext_latency_ffs): altshift.tdf;
			altshift:12:(219,2):(92,oflow_ext_latency_ffs): altshift.tdf;
		}
		lpm_compare:1:(30,17):(194): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_compare:16:(30,17):(215): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_compare:1:(35,17):(297): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_add_sub:13:(36,17):(317): lpm_add_sub.tdf
		{
			addcore:14:(205,4):(48,adder): addcore.tdf;
			altshift:15:(215,2):(70,result_ext_latency_ffs): altshift.tdf;
			altshift:12:(217,2):(85,carry_ext_latency_ffs): altshift.tdf;
			altshift:12:(219,2):(92,oflow_ext_latency_ffs): altshift.tdf;
		}
		lpm_compare:1:(40,17):(423): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_compare:16:(40,17):(444): lpm_compare.tdf
		{
			comptree:2:(291,3):(47,comparator): comptree.tdf
			{
				cmpchain:3:(176,5):(43,cmp_end): cmpchain.tdf
				{
					comptree:4:(137,7):(43,comp): comptree.tdf
					{
						cmpchain:5:(136,7):(43,cmp2): cmpchain.tdf;
						cmpchain:5:(136,7):(55,cmp1): cmpchain.tdf;
						cmpchain:6:(136,7):(67,cmp0): cmpchain.tdf;
						comptree:7:(152,4):(79,sub_comptree): comptree.tdf
						{
							cmpchain:8:(136,7):(37,cmp0): cmpchain.tdf;
							cmpchain:9:(143,5):(49,cmp_end): cmpchain.tdf;
							comptree:10:(152,4):(59,sub_comptree): comptree.tdf
							{
								cmpchain:11:(188,4):(35,eq_cmp_end): cmpchain.tdf;
								cmpchain:8:(193,5):(47,gt_cmp_end): cmpchain.tdf;
							}
						}
					}
				}
			}
			altshift:12:(305,2):(70,aeb_ext_lat_ffs): altshift.tdf;
			altshift:12:(306,2):(77,agb_ext_lat_ffs): altshift.tdf;
		}
	}
}
