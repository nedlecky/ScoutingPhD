HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	dec_7seg.vhd
	{
		dec_7seg [] [U1147235.DLS,U7449008.DLS,U9587408.DLS,U9092257.DLS,U5125632.DLS]
		{
			1 [] [];
		}
	}
	clk_div.vhd
	{
		clk_div [] [U1147235.DLS,U7449008.DLS,U9587408.DLS,U9092257.DLS,U5125632.DLS]
		{
			2 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAB0,DATAB1,DATAB2,CIN,RESULT0,RESULT1,RESULT2];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAB0,DATAB1,DATAB2,DATAB3,CIN,RESULT0,RESULT1,RESULT2,RESULT3];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=5,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,dataa0,dataa1,dataa2,dataa3,dataa4,result0,result1,result2,result3,result4];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=3,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,dataa0,dataa1,dataa2,result0,result1,result2];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=4,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,result0,result1,result2,result3];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=5,DEPTH=0] [data0,data1,data2,data3,data4,result0,result1,result2,result3,result4];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=3,DEPTH=0] [data0,data1,data2,result0,result1,result2];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=4,DEPTH=0] [data0,data1,data2,data3,result0,result1,result2,result3];
		}
	}
	gp2d02.vhd
	{
		gp2d02 [] [U1147235.DLS,U7449008.DLS,U9587408.DLS,U9092257.DLS,U5125632.DLS]
		{
			10 [] [];
		}
	}
	ir_dist.gdf
	{
		ir_dist [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	ir_dist::(0,0):(0): ir_dist.gdf
	{
		gp2d02:10:(0,0):(32): gp2d02.vhd
		{
			lpm_add_sub:11:(109,41):(643): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(87,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(79,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(65,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(46,adder): addcore.tdf;
			}
			lpm_add_sub:11:(81,41):(389): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(87,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(79,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(65,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(46,adder): addcore.tdf;
			}
			lpm_add_sub:11:(71,49):(245): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(87,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(79,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(65,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(46,adder): addcore.tdf;
			}
		}
		clk_div:2:(0,0):(1): clk_div.vhd
		{
			lpm_add_sub:7:(119,25):(694): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:7:(107,25):(611): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:7:(95,25):(528): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:7:(83,25):(445): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:7:(71,25):(362): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:7:(59,25):(279): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
				altshift:9:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
				addcore:8:(212,4):(43,adder): addcore.tdf;
			}
			lpm_add_sub:3:(33,25):(119): lpm_add_sub.tdf
			{
				altshift:6:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:5:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				addcore:4:(212,4):(49,adder): addcore.tdf;
			}
		}
		dec_7seg:1:(0,0):(3): dec_7seg.vhd;
		dec_7seg:1:(0,0):(4): dec_7seg.vhd;
	}
}
