HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	lpm_ram_dq.tdf
	{
		lpm_ram_dq [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_WIDTHAD,LPM_NUMWORDS,LPM_INDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_OUTDATA=REGISTERED,LPM_FILE=NO_FILE,DEVICE_FAMILY] [aglobal.inc,lpm_decode.inc,lpm_mux.inc,altram.inc]
		{
			1 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_WIDTHAD=8,LPM_INDATA=REGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_OUTDATA=UNREGISTERED,LPM_FILE=up1asm.mif,DEVICE_FAMILY=FLEX10K] [inclock,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0,address7,address6,address5,address4,address3,address2,address1,address0,we,q15,q14,q13,q12,q11,q10,q9,q8,q7,q6,q5,q4,q3,q2,q1,q0];
			22 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_WIDTHAD=8,LPM_NUMWORDS=256,LPM_INDATA=REGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_OUTDATA=UNREGISTERED,LPM_FILE="e:\vhdldesigns\ee231\12up2\up2asm.mif",DEVICE_FAMILY=FLEX10K] [inclock,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0,address7,address6,address5,address4,address3,address2,address1,address0,we,q15,q14,q13,q12,q11,q10,q9,q8,q7,q6,q5,q4,q3,q2,q1,q0];
		}
	}
	altram.tdf
	{
		altram [USE_LPM_FOR_AHDL_OPERATORS,WIDTH,AD_WIDTH,NUMWORDS,FILE=NO_FILE,REGISTERINPUTMODE=DEFAULT,USE_EAB=ON,DEVICE_FAMILY] [aglobal.inc,lpm_mux.inc,lpm_decode.inc,memmodes.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,AD_WIDTH=8,NUMWORDS=256,FILE=up1asm.mif,REGISTERINPUTMODE=DATA,USE_EAB=ON,DEVICE_FAMILY=FLEX10K] [ClockI,Address0,Address1,Address2,Address3,Address4,Address5,Address6,Address7,Data0,Data1,Data2,Data3,Data4,Data5,Data6,Data7,Data8,Data9,Data10,Data11,Data12,Data13,Data14,Data15,WE,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14,Q15];
			23 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,AD_WIDTH=8,NUMWORDS=256,FILE="e:\vhdldesigns\ee231\12up2\up2asm.mif",REGISTERINPUTMODE=DATA,USE_EAB=ON,DEVICE_FAMILY=FLEX10K] [ClockI,Address0,Address1,Address2,Address3,Address4,Address5,Address6,Address7,Data0,Data1,Data2,Data3,Data4,Data5,Data6,Data7,Data8,Data9,Data10,Data11,Data12,Data13,Data14,Data15,WE,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14,Q15];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7];
			19 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAA9,DATAA10,DATAA11,DATAA12,DATAA13,DATAA14,DATAA15,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,DATAB9,DATAB10,DATAB11,DATAB12,DATAB13,DATAB14,DATAB15,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7,RESULT8,RESULT9,RESULT10,RESULT11,RESULT12,RESULT13,RESULT14,RESULT15];
			25 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAA9,DATAA10,DATAA11,DATAA12,DATAA13,DATAA14,DATAA15,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,DATAB9,DATAB10,DATAB11,DATAB12,DATAB13,DATAB14,DATAB15,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7,RESULT8,RESULT9,RESULT10,RESULT11,RESULT12,RESULT13,RESULT14,RESULT15];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,result0,result1,result2,result3,result4,result5,result6,result7];
			20 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=16,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,datab10,datab11,datab12,datab13,datab14,datab15,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,dataa10,dataa11,dataa12,dataa13,dataa14,dataa15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			21 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=MANUAL,CASCADE_CHAIN=MANUAL,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN_LENGTH=8,DEVICE_FAMILY=FLEX8000] [aglobal.inc,altshift.inc,comptree.inc]
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=YES,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,ALB];
			18 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=YES,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,AGB];
		}
	}
	comptree.tdf
	{
		comptree [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [lpm_constant.inc,cmpchain.inc,comptree.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=1,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,agb];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=1,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=0] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,agb];
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=4,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=1] [datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,agb];
			17 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=1] [datab0,datab1,dataa0,dataa1,agb];
		}
	}
	cmpchain.tdf
	{
		cmpchain [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,ONE_INPUT_CONSTANT,MODE,CARRY_CHAIN,CASCADE_CHAIN,CARRY_CHAIN_LENGTH,CASCADE_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,comptree.inc]
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,ONE_INPUT_CONSTANT=1,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,agb];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=1,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [datab0,datab1,dataa0,dataa1,agb,aeb];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=1,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [datab0,datab1,dataa0,dataa1,agb];
			15 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=1,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [datab0,datab1,dataa0,dataa1,agb,aeb];
			16 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=1,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=FLEX10K] [datab0,datab1,dataa0,dataa1,agb];
		}
	}
	up2c.vhd
	{
		up2c [] [U5125632.DLS,U9092257.DLS,U9234712.DLS,U9587408.DLS,U2043679.DLS,U7449008.DLS,U1147235.DLS]
		{
			24 [] [];
		}
	}
	system01c.gdf
	{
		system01c [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	system01c::(0,0):(0): system01c.gdf
	{
		lpm_ram_dq::(0,0):(31): lpm_ram_dq.tdf
		{
			altram:23:(101,5):(70,sram): altram.tdf;
		}
		up2c::(0,0):(45): up2c.vhd
		{
			lpm_add_sub:4:(65,33):(674): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(58,adder): addcore.tdf;
				altshift:6:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:19:(81,49):(915): lpm_add_sub.tdf
			{
				addcore:20:(212,4):(82,adder): addcore.tdf;
				altshift:21:(222,2):(137,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(175,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(183,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(81,49):(940): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(58,adder): addcore.tdf;
				altshift:6:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(85,49):(1013): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(58,adder): addcore.tdf;
				altshift:6:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:25:(89,49):(1110): lpm_add_sub.tdf
			{
				addcore:20:(212,4):(82,adder): addcore.tdf;
				altshift:21:(222,2):(137,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(175,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(183,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(89,49):(1135): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(58,adder): addcore.tdf;
				altshift:6:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:4:(101,57):(1500): lpm_add_sub.tdf
			{
				addcore:5:(212,4):(58,adder): addcore.tdf;
				altshift:6:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_compare:8:(69,41):(3183): lpm_compare.tdf
			{
				comptree:9:(292,3):(52,comparator): comptree.tdf
				{
					cmpchain:10:(177,5):(48,cmp_end): cmpchain.tdf
					{
						comptree:11:(140,7):(48,comp): comptree.tdf
						{
							cmpchain:12:(137,7):(48,cmp3): cmpchain.tdf;
							cmpchain:12:(137,7):(61,cmp2): cmpchain.tdf;
							cmpchain:12:(137,7):(74,cmp1): cmpchain.tdf;
							cmpchain:13:(137,7):(87,cmp0): cmpchain.tdf;
							comptree:14:(153,4):(100,sub_comptree): comptree.tdf
							{
								cmpchain:15:(137,7):(40,cmp1): cmpchain.tdf;
								cmpchain:16:(137,7):(53,cmp0): cmpchain.tdf;
								comptree:17:(153,4):(66,sub_comptree): comptree.tdf
								{
									cmpchain:16:(195,6):(36,gt_cmp_end): cmpchain.tdf;
								}
							}
						}
					}
				}
				altshift:7:(306,2):(80,aeb_ext_lat_ffs): altshift.tdf;
				altshift:7:(307,2):(88,agb_ext_lat_ffs): altshift.tdf;
			}
			lpm_compare:18:(69,41):(3184): lpm_compare.tdf
			{
				comptree:9:(292,3):(52,comparator): comptree.tdf
				{
					cmpchain:10:(177,5):(48,cmp_end): cmpchain.tdf
					{
						comptree:11:(140,7):(48,comp): comptree.tdf
						{
							cmpchain:12:(137,7):(48,cmp3): cmpchain.tdf;
							cmpchain:12:(137,7):(61,cmp2): cmpchain.tdf;
							cmpchain:12:(137,7):(74,cmp1): cmpchain.tdf;
							cmpchain:13:(137,7):(87,cmp0): cmpchain.tdf;
							comptree:14:(153,4):(100,sub_comptree): comptree.tdf
							{
								cmpchain:15:(137,7):(40,cmp1): cmpchain.tdf;
								cmpchain:16:(137,7):(53,cmp0): cmpchain.tdf;
								comptree:17:(153,4):(66,sub_comptree): comptree.tdf
								{
									cmpchain:16:(195,6):(36,gt_cmp_end): cmpchain.tdf;
								}
							}
						}
					}
				}
				altshift:7:(306,2):(80,aeb_ext_lat_ffs): altshift.tdf;
				altshift:7:(307,2):(88,agb_ext_lat_ffs): altshift.tdf;
			}
			lpm_add_sub:19:(127,33):(3551): lpm_add_sub.tdf
			{
				addcore:20:(212,4):(82,adder): addcore.tdf;
				altshift:21:(222,2):(137,result_ext_latency_ffs): altshift.tdf;
				altshift:7:(224,2):(175,carry_ext_latency_ffs): altshift.tdf;
				altshift:7:(226,2):(183,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
	}
}
