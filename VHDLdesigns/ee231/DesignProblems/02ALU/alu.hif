HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	multiplier.vhd
	{
		multiplier [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U4470260.DLS,U3877600.DLS]
		{
			1 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=7,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=11,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAA9,DATAA10,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,DATAB9,DATAB10,CIN,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,RESULT10];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,CIN,result0,result1,result2,result3,result4];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=6,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,CIN,result0,result1,result2,result3,result4,result5];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=5,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,dataa0,dataa1,dataa2,dataa3,dataa4,result0,result1,result2,result3,result4];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=7,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,result0,result1,result2,result3,result4,result5,result6];
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=11,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,datab10,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,dataa10,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10];
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=6,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,result0,result1,result2,result3,result4,result5];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=5,DEPTH=0] [data0,data1,data2,data3,data4,result0,result1,result2,result3,result4];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=7,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,result0,result1,result2,result3,result4,result5,result6];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=11,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10];
			15 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=6,DEPTH=0] [data0,data1,data2,data3,data4,data5,result0,result1,result2,result3,result4,result5];
		}
	}
	rippleaddn.vhd
	{
		rippleaddn [width=16] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			19 [width=5] [];
		}
	}
	ha.vhd
	{
		ha [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			20 [] [];
		}
	}
	fa.vhd
	{
		fa [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			21 [] [];
		}
	}
	alu.vhd
	{
		alu [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U4470260.DLS,U3877600.DLS]
		{
			0 [] [];
		}
	}
}
TREE
{
	alu::(0,0):(0): alu.vhd
	{
		multiplier:1:(77,16):(587,mult1): multiplier.vhd
		{
			lpm_add_sub:6:(77,17):(1716): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(212,4):(55,adder): addcore.tdf;
			}
			lpm_add_sub:6:(69,17):(1464): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(212,4):(55,adder): addcore.tdf;
			}
			lpm_add_sub:6:(61,17):(1218): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(212,4):(55,adder): addcore.tdf;
			}
			lpm_add_sub:6:(53,17):(972): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(212,4):(55,adder): addcore.tdf;
			}
			lpm_add_sub:2:(35,17):(600): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(49,adder): addcore.tdf;
			}
			lpm_add_sub:2:(35,17):(589): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(49,adder): addcore.tdf;
			}
		}
		rippleaddn:19:(72,17):(586,adder1): rippleaddn.vhd
		{
			fa:21:(48,22):(314,fa1~136): fa.vhd;
			fa:21:(48,22):(313,fa1~113): fa.vhd;
			fa:21:(48,22):(312,fa1~90): fa.vhd;
			fa:21:(48,22):(311,fa1): fa.vhd;
			ha:20:(44,14):(310,ha1): ha.vhd;
		}
		lpm_add_sub:2:(61,9):(274): lpm_add_sub.tdf
		{
			altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
			altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
			addcore:3:(212,4):(49,adder): addcore.tdf;
		}
		lpm_add_sub:2:(61,9):(268): lpm_add_sub.tdf
		{
			altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
			altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
			addcore:3:(212,4):(49,adder): addcore.tdf;
		}
		lpm_add_sub:12:(61,9):(262): lpm_add_sub.tdf
		{
			altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
			altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
			addcore:3:(212,4):(49,adder): addcore.tdf;
		}
		lpm_add_sub:12:(61,9):(246): lpm_add_sub.tdf
		{
			altshift:5:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			altshift:5:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
			altshift:4:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
			addcore:3:(212,4):(49,adder): addcore.tdf;
		}
	}
}
