HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	altram.tdf
	{
		altram [DEVICE_FAMILY,USE_EAB=ON,REGISTERINPUTMODE=DEFAULT,FILE=NO_FILE,NUMWORDS,AD_WIDTH,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [memmodes.inc,lpm_decode.inc,lpm_mux.inc,aglobal.inc]
		{
			17 [DEVICE_FAMILY=FLEX10K,USE_EAB=ON,REGISTERINPUTMODE=DATA,FILE=dmemory.mif,NUMWORDS=256,AD_WIDTH=8,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q7,Q6,Q5,Q4,Q3,Q2,Q1,Q0,WE,Data7,Data6,Data5,Data4,Data3,Data2,Data1,Data0,Address7,Address6,Address5,Address4,Address3,Address2,Address1,Address0,ClockI];
		}
	}
	lpm_ram_dq.tdf
	{
		lpm_ram_dq [DEVICE_FAMILY,LPM_FILE=NO_FILE,LPM_OUTDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_INDATA=REGISTERED,LPM_NUMWORDS,LPM_WIDTHAD,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [altram.inc,lpm_mux.inc,lpm_decode.inc,aglobal.inc]
		{
			16 [DEVICE_FAMILY=FLEX10K,LPM_FILE=dmemory.mif,LPM_OUTDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_INDATA=REGISTERED,LPM_NUMWORDS=0,LPM_WIDTHAD=8,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,WE,INCLOCK,address0,address1,address2,address3,address4,address5,address6,address7,DATA0,DATA1,DATA2,DATA3,DATA4,DATA5,DATA6,DATA7];
		}
	}
	dmemory.vhd
	{
		dmemory [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U4470260.DLS,U3877600.DLS,U3031072.DLS,U1546459.DLS]
		{
			23 [] [];
		}
	}
	execute.vhd
	{
		execute [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U4470260.DLS,U3877600.DLS]
		{
			22 [] [];
		}
	}
	control.vhd
	{
		control [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U4470260.DLS,U3877600.DLS,U3031072.DLS,U1546459.DLS]
		{
			21 [] [];
		}
	}
	cmpchain.tdf
	{
		cmpchain [DEVICE_FAMILY,CASCADE_CHAIN_LENGTH,CARRY_CHAIN_LENGTH,CASCADE_CHAIN,CARRY_CHAIN,MODE,ONE_INPUT_CONSTANT,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc];
	}
	comptree.tdf
	{
		comptree [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=8,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,cmpchain.inc,lpm_constant.inc];
	}
	lpm_compare.tdf
	{
		lpm_compare [DEVICE_FAMILY=FLEX8000,CASCADE_CHAIN_LENGTH=8,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN=MANUAL,CARRY_CHAIN=MANUAL,ONE_INPUT_IS_CONSTANT=NO,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=UNSIGNED,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,altshift.inc];
	}
	idecode.vhd
	{
		idecode [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U9092257.DLS,U5125632.DLS]
		{
			20 [] [];
		}
	}
	altrom.tdf
	{
		altrom [DEVICE_FAMILY,REGISTERINPUTMODE=DEFAULT,FILE,NUMWORDS,AD_WIDTH,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [memmodes.inc,lpm_decode.inc,lpm_mux.inc,aglobal.inc]
		{
			7 [DEVICE_FAMILY=FLEX10K,REGISTERINPUTMODE=DEFAULT,FILE=program.mif,NUMWORDS=256,AD_WIDTH=8,WIDTH=32,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q31,Q30,Q29,Q28,Q27,Q26,Q25,Q24,Q23,Q22,Q21,Q20,Q19,Q18,Q17,Q16,Q15,Q14,Q13,Q12,Q11,Q10,Q9,Q8,Q7,Q6,Q5,Q4,Q3,Q2,Q1,Q0,Address7,Address6,Address5,Address4,Address3,Address2,Address1,Address0];
		}
	}
	lpm_rom.tdf
	{
		lpm_rom [DEVICE_FAMILY,LPM_FILE,LPM_OUTDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_NUMWORDS,LPM_WIDTHAD,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [altrom.inc,aglobal.inc]
		{
			6 [DEVICE_FAMILY=FLEX10K,LPM_FILE=program.mif,LPM_OUTDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_NUMWORDS=0,LPM_WIDTHAD=8,LPM_WIDTH=32,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14,Q15,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31,ADDRESS0,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,ADDRESS6,ADDRESS7];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			13 [DEPTH=0,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,data7,data6,data5,data4,data3,data2,data1,data0];
			5 [DEPTH=0,WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0,data0];
			4 [DEPTH=0,WIDTH=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result8,result7,result6,result5,result4,result3,result2,result1,result0,data8,data7,data6,data5,data4,data3,data2,data1,data0];
		}
	}
	addcore.tdf
	{
		addcore [DEVICE_FAMILY,CARRY_CHAIN_LENGTH,CARRY_CHAIN,CONSTANT_CIN,width,USE_LPM_FOR_AHDL_OPERATORS] [addcore.inc,aglobal.inc]
		{
			12 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,cin];
			3 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result8,result7,result6,result5,result4,result3,result2,result1,result0,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,cin];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc,aglobal.inc]
		{
			14 [STYLE=top_spim,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=0,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			11 [STYLE=top_spim,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=0,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			2 [STYLE=top_spim,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=0,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=YES,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
		}
	}
	ifetch.vhd
	{
		ifetch [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U9092257.DLS,U5125632.DLS,U3031072.DLS,U1546459.DLS]
		{
			19 [] [];
		}
	}
	top_spim.vhd
	{
		top_spim [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS]
		{
			0 [] [];
		}
	}
}
TREE
{
	top_spim::(0,0):(0): top_spim.vhd
	{
		dmemory:23:(160,10):(320,MEM): dmemory.vhd
		{
			lpm_ram_dq:16:(21,22):(34,data_memory): lpm_ram_dq.tdf
			{
				altram:17:(101,5):(54,sram): altram.tdf;
			}
		}
		execute:22:(146,10):(319,EXE): execute.vhd
		{
			lpm_add_sub:14:(22,1):(1084): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
			lpm_add_sub:11:(66,17):(490): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(58,adder): addcore.tdf;
			}
			lpm_add_sub:11:(60,17):(401): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(58,adder): addcore.tdf;
			}
			lpm_add_sub:11:(58,17):(344): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(119,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(111,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(222,2):(89,result_ext_latency_ffs): altshift.tdf;
				addcore:12:(212,4):(58,adder): addcore.tdf;
			}
		}
		control:21:(133,11):(318,CTL): control.vhd;
		idecode:20:(119,9):(317,ID): idecode.vhd;
		ifetch:19:(109,9):(316,IFE): ifetch.vhd
		{
			lpm_rom:6:(25,14):(555,inst_memory): lpm_rom.tdf
			{
				altrom:7:(63,3):(70,srom): altrom.tdf;
			}
			lpm_add_sub:2:(20,1):(435): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
		}
	}
}
