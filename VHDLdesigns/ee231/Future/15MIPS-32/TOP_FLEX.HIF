HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	ifetch20.vhd
	{
		ifetch20 [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			3 [] [];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=MANUAL,CASCADE_CHAIN=MANUAL,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN_LENGTH=8,DEVICE_FAMILY=FLEX8000] [altshift.inc,comptree.inc];
	}
	comptree.tdf
	{
		comptree [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [lpm_constant.inc,cmpchain.inc,comptree.inc];
	}
	cmpchain.tdf
	{
		cmpchain [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,ONE_INPUT_CONSTANT,MODE,CARRY_CHAIN,CASCADE_CHAIN,CARRY_CHAIN_LENGTH,CASCADE_CHAIN_LENGTH,DEVICE_FAMILY] [comptree.inc];
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			8 [DEPTH=0,WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,result0];
			25 [DEPTH=0,WIDTH=10,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9];
			18 [DEPTH=0,WIDTH=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,data7,data8,result0,result1,result2,result3,result4,result5,result6,result7,result8];
			14 [DEPTH=0,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
			7 [DEPTH=0,WIDTH=7,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,result0,result1,result2,result3,result4,result5,result6];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc,aglobal.inc]
		{
			23 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=10,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=YES,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=10,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT9,RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB9,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA9,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			15 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=10,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=9,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			12 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=10,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			4 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=10,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=YES,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=7,USE_LPM_FOR_AHDL_OPERATORS=OFF] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6];
		}
	}
	addcore.tdf
	{
		addcore [DEVICE_FAMILY,CARRY_CHAIN_LENGTH,CARRY_CHAIN,CONSTANT_CIN,width,USE_LPM_FOR_AHDL_OPERATORS] [addcore.inc,aglobal.inc]
		{
			24 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result1,result0,bg_out,bp_out,dataa1,dataa0,datab1,datab0,cin];
			16 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0,bg_out,bp_out,dataa0,datab0,cin];
			13 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,bp_out,bg_out,result0,result1,result2,result3,result4,result5,result6,result7];
			5 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=0,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,bp_out,bg_out,result0,result1,result2,result3,result4,result5,result6];
		}
	}
	look_add.tdf
	{
		look_add [DEVICE_FAMILY,CARRY_CHAIN,width,USE_LPM_FOR_AHDL_OPERATORS] [look_add.inc,aglobal.inc]
		{
			17 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN=IGNORE,width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [cin,bp_in0,bp_in1,bg_in0,bg_in1,cout0,cout1];
			6 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN=IGNORE,width=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [cin,bp_in0,bg_in0,cout0];
		}
	}
	ifetch.vhd
	{
		ifetch [] [U1147235.DLS,U7449008.DLS,U2043679.DLS,U9587408.DLS,U9234712.DLS,U9092257.DLS,U5125632.DLS,U3031072.DLS,U1546459.DLS];
	}
	lpm_rom.tdf
	{
		lpm_rom [DEVICE_FAMILY,LPM_FILE,LPM_OUTDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_NUMWORDS,LPM_WIDTHAD,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [altrom.inc,aglobal.inc]
		{
			27 [DEVICE_FAMILY=FLEX10K,LPM_FILE=tcgrom.mif,LPM_OUTDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_NUMWORDS=512,LPM_WIDTHAD=9,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,ADDRESS0,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,ADDRESS6,ADDRESS7,ADDRESS8];
			1 [DEVICE_FAMILY=FLEX10K,LPM_FILE=format.mif,LPM_OUTDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_NUMWORDS=60,LPM_WIDTHAD=6,LPM_WIDTH=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [address5,address4,address3,address2,address1,address0,Q5,Q4,Q3,Q2,Q1,Q0];
		}
	}
	altrom.tdf
	{
		altrom [DEVICE_FAMILY,REGISTERINPUTMODE=DEFAULT,FILE,NUMWORDS,AD_WIDTH,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [memmodes.inc,lpm_decode.inc,lpm_mux.inc,aglobal.inc]
		{
			28 [DEVICE_FAMILY=FLEX10K,REGISTERINPUTMODE=DEFAULT,FILE=tcgrom.mif,NUMWORDS=512,AD_WIDTH=9,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q7,Q6,Q5,Q4,Q3,Q2,Q1,Q0,Address8,Address7,Address6,Address5,Address4,Address3,Address2,Address1,Address0];
			2 [DEVICE_FAMILY=FLEX10K,REGISTERINPUTMODE=DEFAULT,FILE=format.mif,NUMWORDS=60,AD_WIDTH=6,WIDTH=6,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Address0,Address1,Address2,Address3,Address4,Address5,Q0,Q1,Q2,Q3,Q4,Q5];
		}
	}
	idecode.vhd
	{
		idecode [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			9 [] [];
		}
	}
	control.vhd
	{
		control [] [U1546459.DLS,U3031072.DLS,U3877600.DLS,U4470260.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			10 [] [];
		}
	}
	execute.vhd
	{
		execute [] [U3877600.DLS,U4470260.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			11 [] [];
		}
	}
	dmemory.vhd
	{
		dmemory [] [U1546459.DLS,U3031072.DLS,U3877600.DLS,U4470260.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			19 [] [];
		}
	}
	lpm_ram_dq.tdf
	{
		lpm_ram_dq [DEVICE_FAMILY,LPM_FILE=NO_FILE,LPM_OUTDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_INDATA=REGISTERED,LPM_NUMWORDS,LPM_WIDTHAD,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [altram.inc,lpm_mux.inc,lpm_decode.inc,aglobal.inc]
		{
			20 [DEVICE_FAMILY=FLEX10K,LPM_FILE=dmemory.mif,LPM_OUTDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_INDATA=REGISTERED,LPM_NUMWORDS=0,LPM_WIDTHAD=8,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [DATA7,DATA6,DATA5,DATA4,DATA3,DATA2,DATA1,DATA0,address7,address6,address5,address4,address3,address2,address1,address0,INCLOCK,WE,Q7,Q6,Q5,Q4,Q3,Q2,Q1,Q0];
		}
	}
	altram.tdf
	{
		altram [DEVICE_FAMILY,USE_EAB=ON,REGISTERINPUTMODE=DEFAULT,FILE=NO_FILE,NUMWORDS,AD_WIDTH,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [memmodes.inc,lpm_decode.inc,lpm_mux.inc,aglobal.inc]
		{
			21 [DEVICE_FAMILY=FLEX10K,USE_EAB=ON,REGISTERINPUTMODE=DATA,FILE=dmemory.mif,NUMWORDS=256,AD_WIDTH=8,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [ClockI,Address0,Address1,Address2,Address3,Address4,Address5,Address6,Address7,Data0,Data1,Data2,Data3,Data4,Data5,Data6,Data7,WE,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7];
		}
	}
	onepulse.vhd
	{
		onepulse [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			31 [] [];
		}
	}
	debounce.vhd
	{
		debounce [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			30 [] [];
		}
	}
	dec_7seg.vhd
	{
		dec_7seg [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			29 [] [];
		}
	}
	char_rom.vhd
	{
		char_rom [] [U1546459.DLS,U3031072.DLS,U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			26 [] [];
		}
	}
	vga_sync.vhd
	{
		vga_sync [] [U5125632.DLS,U9092257.DLS,U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			22 [] [];
		}
	}
	top_flex.vhd
	{
		top_flex [ADDR_WIDTH=12,DATA_WIDTH=1] [U1147235.DLS,U7449008.DLS,U9587408.DLS,U9092257.DLS,U5125632.DLS,U3031072.DLS,U1546459.DLS,u0453902.dls]
		{
			0 [ADDR_WIDTH=12,DATA_WIDTH=1] [];
		}
	}
}
TREE
{
	top_flex::(0,0):(0): top_flex.vhd
	{
		lpm_rom:1:(235,14):(4974,format_rom): lpm_rom.tdf
		{
			altrom:2:(63,3):(42,srom): altrom.tdf;
		}
		ifetch20:3:(251,9):(4975,IFE): ifetch20.vhd
		{
			lpm_add_sub:4:(28,1):(1969): lpm_add_sub.tdf
			{
				addcore:5:(215,9):(55,adder0): addcore.tdf;
				look_add:6:(216,4):(86,look_aheader): look_add.tdf;
				altshift:7:(222,2):(94,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(114,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(122,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		idecode:9:(264,9):(4976,ID): idecode.vhd;
		control:10:(278,11):(4977,CTL): control.vhd;
		execute:11:(291,10):(4978,EXE): execute.vhd
		{
			lpm_add_sub:12:(58,17):(344): lpm_add_sub.tdf
			{
				addcore:13:(215,9):(58,adder0): addcore.tdf;
				look_add:6:(216,4):(89,look_aheader): look_add.tdf;
				altshift:14:(222,2):(97,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:12:(60,17):(401): lpm_add_sub.tdf
			{
				addcore:13:(215,9):(58,adder0): addcore.tdf;
				look_add:6:(216,4):(89,look_aheader): look_add.tdf;
				altshift:14:(222,2):(97,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:12:(66,17):(490): lpm_add_sub.tdf
			{
				addcore:13:(215,9):(58,adder0): addcore.tdf;
				look_add:6:(216,4):(89,look_aheader): look_add.tdf;
				altshift:14:(222,2):(97,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:15:(22,1):(1084): lpm_add_sub.tdf
			{
				addcore:16:(215,9):(61,adder1): addcore.tdf;
				addcore:13:(215,9):(92,adder0): addcore.tdf;
				look_add:17:(216,4):(123,look_aheader): look_add.tdf;
				altshift:18:(222,2):(134,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(158,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(166,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		dmemory:19:(305,10):(4979,MEM): dmemory.vhd
		{
			lpm_ram_dq:20:(21,22):(34,data_memory): lpm_ram_dq.tdf
			{
				altram:21:(101,5):(54,sram): altram.tdf;
			}
		}
		vga_sync:22:(319,10):(4981,SYNC): vga_sync.vhd
		{
			lpm_add_sub:23:(40,9):(323): lpm_add_sub.tdf
			{
				addcore:24:(215,9):(64,adder1): addcore.tdf;
				addcore:13:(215,9):(95,adder0): addcore.tdf;
				look_add:17:(216,4):(126,look_aheader): look_add.tdf;
				altshift:25:(222,2):(137,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(163,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(171,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:23:(59,9):(731): lpm_add_sub.tdf
			{
				addcore:24:(215,9):(64,adder1): addcore.tdf;
				addcore:13:(215,9):(95,adder0): addcore.tdf;
				look_add:17:(216,4):(126,look_aheader): look_add.tdf;
				altshift:25:(222,2):(137,result_ext_latency_ffs): altshift.tdf;
				altshift:8:(224,2):(163,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(226,2):(171,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		char_rom:26:(326,11):(4982,CGROM): char_rom.vhd
		{
			lpm_rom:27:(20,16):(91,char_gen_rom): lpm_rom.tdf
			{
				altrom:28:(63,3):(47,srom): altrom.tdf;
			}
		}
		dec_7seg:29:(331,9):(4983,MSD): dec_7seg.vhd;
		dec_7seg:29:(337,9):(4984,LSD): dec_7seg.vhd;
		debounce:30:(346,14):(4985,DB1): debounce.vhd;
		debounce:30:(350,14):(4986,DB2): debounce.vhd;
		onepulse:31:(354,14):(4987,SP1): onepulse.vhd;
	}
}
