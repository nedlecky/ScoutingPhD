HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	declut.tdf
	{
		declut [LATENCY,TOT_LEVELS,STAGE,width,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,bypassff.inc]
		{
			11 [LATENCY=0,TOT_LEVELS=1,STAGE=0,width=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data2,data1,data0,enable];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [DEVICE_FAMILY,CASCADE_CHAIN=MANUAL,LPM_PIPELINE=0,LPM_DECODES,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,altshift.inc,lpm_compare.inc,lpm_constant.inc,aglobal.inc]
		{
			9 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN=IGNORE,LPM_PIPELINE=0,LPM_DECODES=8,LPM_WIDTH=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data2,data1,data0,enable];
		}
	}
	muxlut.tdf
	{
		muxlut [CASCADE_CHAIN,LOCAL=0,REM_LATENCY,LATENCY,TOT_LEVELS,LEVEL,SIZE,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,altshift.inc]
		{
			8 [CASCADE_CHAIN=IGNORE,LOCAL=1,LATENCY=0,TOT_LEVELS=2,LEVEL=1,SIZE=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result,data1,data0,select0];
			7 [CASCADE_CHAIN=IGNORE,LOCAL=0,LATENCY=0,TOT_LEVELS=2,LEVEL=0,SIZE=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result,data3,data2,data1,data0,select1,select0];
			6 [CASCADE_CHAIN=IGNORE,LOCAL=0,LATENCY=0,TOT_LEVELS=2,LEVEL=1,SIZE=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result,data7,data6,data5,data4,data3,data2,data1,data0,select2,select1,select0];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			10 [DEPTH=0,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,data7,data6,data5,data4,data3,data2,data1,data0];
			5 [DEPTH=0,WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result15,result14,result13,result12,result11,result10,result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0];
		}
	}
	bypassff.tdf
	{
		bypassff [WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			4 [WIDTH=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [q2,d2,d1,d0];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [LPM_PIPELINE=0,LPM_WIDTHS,LPM_SIZE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,bypassff.inc,altshift.inc]
		{
			3 [LPM_PIPELINE=0,LPM_WIDTHS=3,LPM_SIZE=8,LPM_WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result15,result14,result13,result12,result11,result10,result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,data7_15,data7_14,data7_13,data7_12,data7_11,data7_10,data7_9,data7_8,data7_7,data7_6,data7_5,data7_4,data7_3,data7_2,data7_1,data7_0,data6_15,data6_14,data6_13,data6_12,data6_11,data6_10,data6_9,data6_8,data6_7,data6_6,data6_5,data6_4,data6_3,data6_2,data6_1,data6_0,data5_15,data5_14,data5_13,data5_12,data5_11,data5_10,data5_9,data5_8,data5_7,data5_6,data5_5,data5_4,data5_3,data5_2,data5_1,data5_0,data4_15,data4_14,data4_13,data4_12,data4_11,data4_10,data4_9,data4_8,data4_7,data4_6,data4_5,data4_4,data4_3,data4_2,data4_1,data4_0,data3_15,data3_14,data3_13,data3_12,data3_11,data3_10,data3_9,data3_8,data3_7,data3_6,data3_5,data3_4,data3_3,data3_2,data3_1,data3_0,data2_15,data2_14,data2_13,data2_12,data2_11,data2_10,data2_9,data2_8,data2_7,data2_6,data2_5,data2_4,data2_3,data2_2,data2_1,data2_0,data1_15,data1_14,data1_13,data1_12,data1_11,data1_10,data1_9,data1_8,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_15,data0_14,data0_13,data0_12,data0_11,data0_10,data0_9,data0_8,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0,sel2,sel1,sel0];
		}
	}
	altdpram.tdf
	{
		altdpram [DEVICE_FAMILY,USE_EAB=ON,OUTDATA_ACLR=ON,OUTDATA_REG=UNREGISTERED,RDCONTROL_ACLR=ON,RDCONTROL_REG=OUTCLOCK,RDADDRESS_ACLR=ON,RDADDRESS_REG=OUTCLOCK,WRCONTROL_ACLR=ON,WRCONTROL_REG=INCLOCK,WRADDRESS_ACLR=ON,WRADDRESS_REG=INCLOCK,INDATA_ACLR=ON,INDATA_REG=INCLOCK,LPM_FILE=NO_FILE,FILE=NO_FILE,NUMWORDS,WIDTHAD,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [memmodes.inc,lpm_decode.inc,lpm_mux.inc,a_hdffe.inc,aglobal.inc]
		{
			2 [DEVICE_FAMILY=FLEX10K,USE_EAB=ON,OUTDATA_ACLR=ON,OUTDATA_REG=UNREGISTERED,RDCONTROL_ACLR=ON,RDCONTROL_REG=UNREGISTERED,RDADDRESS_ACLR=ON,RDADDRESS_REG=UNREGISTERED,WRCONTROL_ACLR=ON,WRCONTROL_REG=INCLOCK,WRADDRESS_ACLR=ON,WRADDRESS_REG=INCLOCK,INDATA_ACLR=ON,INDATA_REG=INCLOCK,LPM_FILE=NO_FILE,FILE=NO_FILE,NUMWORDS=8,WIDTHAD=3,WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [q15,q14,q13,q12,q11,q10,q9,q8,q7,q6,q5,q4,q3,q2,q1,q0,wren,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0,wraddress2,wraddress1,wraddress0,inclock,rdaddress2,rdaddress1,rdaddress0];
		}
	}
	lpm_ram_dp.tdf
	{
		lpm_ram_dp [DEVICE_FAMILY,LPM_FILE=NO_FILE,LPM_OUTDATA=REGISTERED,LPM_WRADDRESS_CONTROL=REGISTERED,LPM_RDADDRESS_CONTROL=REGISTERED,LPM_INDATA=REGISTERED,LPM_NUMWORDS,LPM_WIDTHAD,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [altdpram.inc,lpm_mux.inc,lpm_decode.inc,aglobal.inc]
		{
			1 [DEVICE_FAMILY=FLEX10K,LPM_FILE=NO_FILE,LPM_OUTDATA=unregistered,LPM_WRADDRESS_CONTROL=registered,LPM_RDADDRESS_CONTROL=unregistered,LPM_INDATA=registered,LPM_NUMWORDS=0,LPM_WIDTHAD=3,LPM_WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14,Q15,WRCLOCK,WREN,WRADDRESS0,WRADDRESS1,WRADDRESS2,DATA0,DATA1,DATA2,DATA3,DATA4,DATA5,DATA6,DATA7,DATA8,DATA9,DATA10,DATA11,DATA12,DATA13,DATA14,DATA15,RDADDRESS0,RDADDRESS1,RDADDRESS2];
		}
	}
	idecode.vhd
	{
		idecode [] [U1546459.DLS,U3031072.DLS,U5125632.DLS,U9092257.DLS,U9234712.DLS,U9587408.DLS,U2043679.DLS,U7449008.DLS,U1147235.DLS]
		{
			0 [] [];
		}
	}
}
TREE
{
	idecode::(0,0):(0): idecode.vhd
	{
		lpm_ram_dp:1:(55,15):(497,reg1): lpm_ram_dp.tdf
		{
			altdpram:2:(149,7):(71,sram): altdpram.tdf
			{
				lpm_mux:3:(227,4):(72,mux): lpm_mux.tdf
				{
					bypassff:4:(83,17):(177,sel_latency_ff0): bypassff.tdf;
					altshift:5:(89,2):(188,external_latency_ffs): altshift.tdf;
					muxlut:6:(182,21):(226): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(249): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(272): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(295): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(318): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(341): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(364): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(387): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(410): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(433): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(456): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(479): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(502): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(525): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(548): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(571): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
				}
				lpm_decode:9:(230,4):(226,wdecoder): lpm_decode.tdf
				{
					altshift:10:(76,2):(42,external_latency_ffs): altshift.tdf;
					declut:11:(95,5):(64,decoder): declut.tdf;
				}
			}
		}
		lpm_ram_dp:1:(75,15):(498,reg2): lpm_ram_dp.tdf
		{
			altdpram:2:(149,7):(71,sram): altdpram.tdf
			{
				lpm_mux:3:(227,4):(72,mux): lpm_mux.tdf
				{
					bypassff:4:(83,17):(177,sel_latency_ff0): bypassff.tdf;
					altshift:5:(89,2):(188,external_latency_ffs): altshift.tdf;
					muxlut:6:(182,21):(226): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(249): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(272): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(295): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(318): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(341): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(364): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(387): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(410): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(433): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(456): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(479): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(502): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(525): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(548): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
					muxlut:6:(182,21):(571): muxlut.tdf
					{
						muxlut:7:(209,27):(45): muxlut.tdf;
						muxlut:7:(209,27):(64): muxlut.tdf;
						muxlut:8:(232,21):(83): muxlut.tdf;
					}
				}
				lpm_decode:9:(230,4):(226,wdecoder): lpm_decode.tdf
				{
					altshift:10:(76,2):(42,external_latency_ffs): altshift.tdf;
					declut:11:(95,5):(64,decoder): declut.tdf;
				}
			}
		}
	}
}
