--
--
-- DMEMORY module (provides the data memory for the SPIM computer)
-- Only 8 locations implemented - Addresses 0 and 1 are read/write
-- and 2 to 7 are read only - Locations set to initial values on reset
--
-- Copyright (c) 1996 J. Hamblen, Georgia Tech, School of ECE, Atlanta, GA
--
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_SIGNED.all;

entity dmemory is

 
   port(rd_bus : out std_logic_vector(7 downto 0);
        ra_bus : in std_logic_vector(7 downto 0);
        wd_bus : in std_logic_vector(7 downto 0);
        wadd_bus : in std_logic_vector(7 downto 0);
        MemRead, Memwrite, MemtoReg : in std_logic;
                clock,reset: in std_logic);

end dmemory;

--
-- DMEMORY architecture
--

architecture behavior of dmemory is
	  
  signal mem0,mem1,mem2,mem3,mem4,mem5,mem6,mem7 : std_logic_vector(7 downto 0);
  signal mux,muxmem0,muxmem1,imem0,imem1 : std_logic_vector(7 downto 0);
  signal mem0write, mem1write : std_logic;


begin
-- Read Data Memory
with ra_bus(2 downto 0) select
mux <= mem0 WHEN "000",
	   mem1 WHEN "001",
	   mem2 WHEN "010",
	   mem3 WHEN "011",
	   mem4 WHEN "100",
	   mem5 WHEN "101",
	   mem6 WHEN "110",
       mem7 WHEN "111",
       CONV_STD_LOGIC_VECTOR(255,8) WHEN others;

-- Mux to skip data memory for Rformat instructions
--rd_bus <= ra_bus(7 downto 0) WHEN (MemtoReg='0') ELSE mux WHEN (MemRead='1')
--                ELSE CONV_STD_LOGIC_VECTOR(255,8);

-- Write to data memory?
mem0write <= '1' When ((Memwrite='1') AND(wadd_bus(2 downto 0)="000"))
              ELSE '0';
mem1write <= '1' When ((Memwrite='1') AND (wadd_bus(2 downto 0)="001"))
              ELSE '0';
imem0 <= To_stdlogicvector(X"55");
imem1 <= To_stdlogicvector(X"AA");
mem2<= CONV_STD_LOGIC_VECTOR(242,8);
mem3<= CONV_STD_LOGIC_VECTOR(243,8);
mem4<= CONV_STD_LOGIC_VECTOR(244,8);
mem5<= CONV_STD_LOGIC_VECTOR(245,8);
mem6<= CONV_STD_LOGIC_VECTOR(246,8);
mem7<= CONV_STD_LOGIC_VECTOR(247,8);
muxmem0 <= wd_bus WHEN mem0write='1' ELSE mem0;
muxmem1 <= wd_bus WHEN mem1write='1' ELSE mem1;
--mem0
Process
 Begin   
 Wait until clock'event and clock='1';
   if (reset = '1') then
     mem0 <= imem0;
     mem1 <= imem1;
   else
     mem0 <= muxmem0;
     mem1 <= muxmem1;
   end if;
 end process;
end behavior;

